import * as EASING from '../src/Easing'

describe('Animation::Easing', () => {
  it('Should properly export easing', () => {
    expect(EASING.inQuad(0, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.outQuad(0, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.inOutQuad(0, 0, 0, 100)).toBeInstanceOf(Number)
    expect(EASING.inOutQuad(0, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.inCubic(0, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.outCubic(0, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.inOutCubic(0, 0, 0, 100)).toBeInstanceOf(Number)
    expect(EASING.inOutCubic(0, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.inQuart(0, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.outQuart(0, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.inOutQuart(0, 0, 0, 100)).toBeInstanceOf(Number)
    expect(EASING.inOutQuart(0, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.inQuint(0, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.outQuint(0, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.inOutQuint(0, 0, 0, 100)).toBeInstanceOf(Number)
    expect(EASING.inOutQuint(0, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.inSine(0, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.outSine(0, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.inOutSine(0, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.inExpo(0, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.inExpo(5, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.outExpo(0, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.outExpo(5, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.inOutExpo(0, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.inOutExpo(2, 0, 0, 2)).toBeInstanceOf(Number)
    expect(EASING.inOutExpo(1, 0, 0, 100)).toBeInstanceOf(Number)
    expect(EASING.inOutExpo(100, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.inCirc(0, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.outCirc(0, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.inOutCirc(0, 0, 0, 100)).toBeInstanceOf(Number)
    expect(EASING.inOutCirc(0, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.inElastic(0, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.inElastic(5, 0, 0, 5)).toBeInstanceOf(Number)
    expect(EASING.inElastic(5, 0, -2, 2)).toBeInstanceOf(Number)
    expect(EASING.inElastic(5, 0, 2, 2)).toBeInstanceOf(Number)
    expect(EASING.outElastic(0, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.outElastic(5, 0, 0, 5)).toBeInstanceOf(Number)
    expect(EASING.outElastic(5, 0, -2, 2)).toBeInstanceOf(Number)
    expect(EASING.outElastic(5, 0, 2, 2)).toBeInstanceOf(Number)
    expect(EASING.inOutElastic(0, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.inOutElastic(8, 0, 0, 8)).toBeInstanceOf(Number)
    expect(EASING.inOutElastic(8, 0, -2, 2)).toBeInstanceOf(Number)
    expect(EASING.inOutElastic(8, 0, 2, 2)).toBeInstanceOf(Number)
    expect(EASING.inOutElastic(0.5, 0, 2, 2)).toBeInstanceOf(Number)
    expect(EASING.inBack(0, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.outBack(0, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.inOutBack(0, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.inOutBack(1, 0, 0, 5)).toBeInstanceOf(Number)
    expect(EASING.inBounce(0, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.outBounce(1, 0, 0, 5)).toBeInstanceOf(Number)
    expect(EASING.outBounce(0.7, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.outBounce(1463, 1, 110.5, 2000)).toBeInstanceOf(Number)
    expect(EASING.outBounce(0.8, 0, 0, 0.001)).toBeInstanceOf(Number)
    expect(EASING.inOutBounce(0, 0, 0, 0)).toBeInstanceOf(Number)
    expect(EASING.inOutBounce(1, 0, 0, 5)).toBeInstanceOf(Number)
  })
})
